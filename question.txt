# Monster Random v1・v2 欠陥調査報告書

## 調査日時: 2025年7月2日

## 調査対象
- `/src/pages/monster-random-v1.tsx` (version1.2)
- `/src/pages/monster-random-v2.tsx` (version2.0)
- 比較対象: `/src/pages/monster-random-v3.tsx` (version3.0)

## 発見された重大な欠陥

### 【v1の欠陥】

#### 1. **UIフリッカリング問題** ⚠️ HIGH
**問題**: データ更新時にUIが瞬間的に消失する
```tsx
// v1の問題のあるレンダリング条件
{monster && !isLoading ? (
  <MonsterCard monster={monster} />
) : (
  <PlaceholderMessage />
)}
```
**現象**:
- ボタンクリック時に`isLoading`が`true`になる
- 同時に`monster`は残っているが、`!isLoading`が`false`になるため条件不一致
- MonsterCardが一瞬消失してPlaceholderMessageが表示される
- データ取得完了後にMonsterCardが再表示

**影響**: ユーザーエクスペリエンスが著しく悪化

#### 2. **PlaceholderMessage依存** ⚠️ MEDIUM
**問題**: 全ての状態（ローディング・エラー・空状態）を1つのコンポーネントで処理
```tsx
<PlaceholderMessage
  message={isLoading ? "読み込み中…" : errorMsg ?? "モンスターの情報はまだありません。"}
/>
```
**影響**:
- 状態に応じたビジュアル差別化ができない
- エラー状態が目立たない
- ローディングアニメーションなし

### 【v2の欠陥】

#### 1. **ダミーデータによる偽装表示** ⚠️ CRITICAL
**問題**: 常に空のモンスターデータを表示してエラーを隠蔽
```tsx
<MonsterCard
  monster={monster || {
    id: 0,
    name: "",
    types: [],
    image: ""
  }}
/>
```
**深刻な影響**:
- **エラー状態が完全に隠蔽される** - ユーザーはエラーが発生していることがわからない
- **空データが正常データとして表示される** - MonsterCardが「名前不明」「タイプ不明」として表示
- **デバッグが困難** - 問題の発見・特定が困難

#### 2. **不適切なローディングUI** ⚠️ MEDIUM
**問題**: ボタンテキストを非表示にするだけの貧弱なローディング表現
```tsx
<span style={{ visibility: isLoading ? "hidden" : "visible" }}>
  ランダム更新
</span>
```
**影響**:
- ローディング中にボタンが空になる
- ユーザーに処理中であることが伝わりにくい

#### 3. **エラーハンドリングの完全欠如** ⚠️ CRITICAL
**問題**: `errorMsg`状態は設定されるが、UIでは一切表示されない
```tsx
// errorMsgが設定されても表示する場所がない
catch {
  setErrorMsg("取得に失敗しました"); // ←設定されるが使用されない
}
```

### 【v3での改善点（対比）】

#### 1. **適切な状態別コンポーネント**
```tsx
{errorMsg ? (
  <MonsterCardError errorMessage={errorMsg} />
) : monster && isImageLoaded ? (
  <MonsterCard monster={monster} />
) : showSpinner ? (
  <MonsterCardLoading />
) : (
  <MonsterCardEmpty />
)}
```

#### 2. **画像プリロード機能**
```tsx
const preloadImage = (src: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve();
    img.onerror = () => reject();
    img.src = src;
  });
};
```

#### 3. **適切なクリーンアップ処理**
```tsx
useEffect(() => {
  let isCancelled = false;
  // ... 処理 ...
  return () => {
    isCancelled = true; // メモリリーク防止
  };
}, []);
```

## 重大度ランキング

### 🚨 CRITICAL（致命的）
1. **v2: ダミーデータによるエラー隠蔽** - ユーザーが問題を認識できない
2. **v2: エラーハンドリングの完全欠如** - 障害時の適切な対応不可

### ⚠️ HIGH（高）
3. **v1: UIフリッカリング問題** - UX著しく悪化

### ⚠️ MEDIUM（中）
4. **v1: PlaceholderMessage依存** - 状態表現の貧弱さ
5. **v2: 不適切なローディングUI** - ローディング体験の悪さ

## 実用性評価

### v1: 🔴 **実用不可**
- フリッカリングによりUXが破綻
- ただし、エラーは一応表示される

### v2: 🔴 **絶対に使用禁止**
- エラーが完全に隠蔽される設計ミス
- 障害発生時にユーザーもシステム管理者も問題を認識できない
- 最も危険なバージョン

### v3: 🟢 **実用可能**
- 全ての問題が適切に解決されている
- プロダクション環境で使用可能

## 技術的根本原因

### v1の根本原因
- **条件分岐の設計ミス**: `monster && !isLoading`という条件により、ローディング中に既存データが消失
- **状態管理の不備**: ローディング状態と表示状態の適切な分離ができていない

### v2の根本原因
- **フォールバック設計の誤解**: null合体演算子`||`でダミーデータを提供する設計思想の誤り
- **エラーUI設計の欠如**: エラー状態の表示方法を全く考慮していない設計

## 推奨事項

1. **v1・v2の即座使用停止** - 特にv2は緊急停止が必要
2. **v3の採用** - 現時点で最も安全で実用的
3. **コードレビュープロセスの強化** - このような基本的なUXバグの事前発見
4. **エラーハンドリング設計ガイドラインの策定** - エラー状態の適切な表現方法の標準化

## 結論

v1とv2は共に**プロダクション環境での使用に適さない**重大な欠陥を含んでいる。特にv2は**エラーを完全に隠蔽する致命的な設計ミス**があり、システムの信頼性を根本的に損なう危険性がある。v3への移行を強く推奨する。
